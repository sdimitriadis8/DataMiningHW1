%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%
%&%                                                   %&%
%&%             �.07 - ������� ���������              %&%
%&%                 1� ����� ��������                 %&%
%&%                                                   %&%
%&%                     ���������:                    %&%
%&%                                                   %&%
%&%                    ������ �����     �.�.:372      %&%
%&%                ����������� �������� �.�.:359      %&%
%&%                                                   %&%
%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%&%
%--------------------------------------------------------

clear all;
clc; 

% ������� ��� ������� ���������/������������
load('BatsiDimitriadisData.mat');

X=learn;
Y=test;

% ����������� ��� ���������� ��� ������ ��������� X
[m,n] = size(X) ;

% ������������ ����������-������� ��� �� ����������
A = zeros(m,n);
B = zeros(m,n);

% ��� �� ����������������� 10-fold cross-validation 
% �� ����������� 10 ������� ���������� ��� 
% ����-������-���� ��������� ��� ������� ���������.
% ���� ���� �� ���������������� �� 9 (k-1)
% ��������� �� ������ �����������, ��� ��
% ����������� ��������� �� ������ ������� ���
% ��������. ��� �� ������ �� �������� �� ���������
% ��� ����������:

% 1. ��������� ���� ����������� ������� ����������, ��� �� 
% ����� ����� ��� ����� ��� �� (��������) �������
index = randperm(m);

% 2. ������ �������� ��� ������� ��� ������ X ��� ���������
% ��� �� �������������� ��� �������� �� 10 ���� ���������
% ���, ���� ������ �����
for i=1:m
    
    A(i,:) = X(index(i),:);
    B(i) = Y(index(i));

end

% % ��������� ��� 10 ����� ���������� �������������
% % ��� ���������� ��� ��� ��������� ��� ������ A
% C = zeros(100,14,10)
% for i=1:10
%     
%     for j=1:100
%         
%         C(j,:,i)=A(j,:);
%         
%     end
%     
% end

classloss = 1;

for i=1:2:9

        KnnMdl = fitcknn(X,Y,'NumNeighbors',i,'Standardize',1);
        cvknnMdl = crossval(KnnMdl);
        cvknnloss = kfoldLoss(cvknnMdl);

        if cvknnloss < classloss

            classloss = cvknnloss;
            neighbors = i;
        end


    end


disp(neighbors);
disp(classloss);




% for i=1:10
%     
%     for k=1:10
%         
%         if (k==i && k<10)
%             k=k+1;
%         end 
%         for j=1:100
% 
%             C(j,:,i,k)=B(j,:,k);
% 
%         end
%         
%     end
%     
% end

%Naive Bayes

NBMdl = fitcnb(X,Y,'Distribution','normal');
cvNBMdl = crossval(NBMdl);
cvNBLoss = kfoldLoss(cvNBMdl);

disp(cvNBLoss);

%SVM

SVMModel = fitcsvm(X,Y);
